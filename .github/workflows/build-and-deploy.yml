name: Build and Deploy Angular App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    # Step 1: Get code from repository
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm install
        echo "✅ Dependencies installed"
    
    # Step 4: Build the app
    - name: Build Angular app
      run: |
        echo "🔨 Building Angular app..."
        npm run build -- --configuration production
        echo "✅ Build completed"
    
    # Step 5: Verify build output
    - name: Verify build
      run: |
        echo "🔍 Checking build output..."

        # Check if dist folder exists
        if [ ! -d "dist" ]; then
          echo "❌ Error: dist folder not found"
          exit 1
        fi
        
        # Check if your app folder exists
        if [ ! -d "dist/car360-gallery-tool-angular" ]; then
          echo "❌ Error: dist/car360-gallery-tool-angular not found"
          echo "Found these folders in dist:"
          ls -la dist/
          exit 1
        fi
        
        # List files in build
        echo "📁 Build contents:"
        ls -la dist/car360-gallery-tool-angular/
        
        # Check for index.html
        if [ ! -f "dist/car360-gallery-tool-angular/index.html" ]; then
          echo "❌ Error: index.html not found"
          exit 1
        fi
        
        BUILD_SIZE=$(du -sh dist/car360-gallery-tool-angular | cut -f1)
        echo "📊 Build size: $BUILD_SIZE"
        echo "✅ Build verification passed!"
    
    # Step 6: Generate timestamp for release
    - name: Generate release timestamp
      id: timestamp
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        echo "📅 Release timestamp: $TIMESTAMP"
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        
        # Also save commit info
        echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
    
    # Step 7: Prepare new release
    - name: Prepare new release
      run: |
        echo "📁 Preparing new release..."
        
        BASE_DIR="/var/www2/m.aaaauto/htdocs/photo360-beta"
        TEMP_DIR="$BASE_DIR/.deploy_tmp_${{ steps.timestamp.outputs.timestamp }}"
        
        # Create temporary directory for new release
        mkdir -p "$TEMP_DIR"
        
        # Copy built files to temp directory
        cp -r dist/car360-gallery-tool-angular/* "$TEMP_DIR/"
        
        # Create deployment info file
        cat > "$TEMP_DIR/deployment.json" << EOF
        {
          "timestamp": "${{ steps.timestamp.outputs.timestamp }}",
          "commit": "${{ steps.timestamp.outputs.commit_sha }}",
          "branch": "${{ steps.timestamp.outputs.branch }}",
          "deployer": "${{ github.actor }}",
          "deploy_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        
        echo "✅ New release prepared in temp directory"

    # Step 8: Set permissions
    - name: Set permissions
      run: |
        echo "🔒 Setting proper permissions..."
        
        TEMP_DIR="/var/www2/m.aaaauto/htdocs/photo360-beta/.deploy_tmp_${{ steps.timestamp.outputs.timestamp }}"
        
        # Set permissions for web server
        find "$TEMP_DIR" -type f -exec chmod 644 {} \;
        find "$TEMP_DIR" -type d -exec chmod 755 {} \;
        
        echo "✅ Permissions set"
    
   # Step 9: Create backup of current version
    - name: Backup current version
      run: |
        echo "💾 Backing up current version..."
        
        BASE_DIR="/var/www2/m.aaaauto/htdocs/photo360-beta"
        BACKUP_DIR="$BASE_DIR/releases/${{ steps.timestamp.outputs.timestamp }}_backup"
        
        # Create releases directory if it doesn't exist
        mkdir -p "$BASE_DIR/releases"
        
        # If current production directory exists, copy it to backup
        if [ -d "$BASE_DIR/Car360GalleryTool/new-360-beta" ]; then
          cp -r "$BASE_DIR/Car360GalleryTool/new-360-beta" "$BACKUP_DIR"
          echo "✅ Current version backed up to releases/${{ steps.timestamp.outputs.timestamp }}_backup"
          
          # Save backup info
          echo "${{ steps.timestamp.outputs.timestamp }}_backup" > "$BASE_DIR/.previous_release"
        else
          echo "⚠️ No current version found (first deployment?)"
        fi

    # Step 10: Deploy new version atomically
    - name: Switch to new version
      run: |
        echo "🔄 Deploying new version..."
        
        BASE_DIR="/var/www2/m.aaaauto/htdocs/photo360-beta"
        TEMP_DIR="$BASE_DIR/.deploy_tmp_${{ steps.timestamp.outputs.timestamp }}"
        CURRENT_DIR="$BASE_DIR/Car360GalleryTool/new-360-beta"
        OLD_DIR="$BASE_DIR/.old_${{ steps.timestamp.outputs.timestamp }}"
        
        # Atomic deployment using directory renaming
        if [ -d "$CURRENT_DIR" ]; then
          # Move current to old (instant)
          mv "$CURRENT_DIR" "$OLD_DIR"
        fi
        
        # Move new version to current (instant)
        mv "$TEMP_DIR" "$CURRENT_DIR"
        
        # Remove old version after successful switch
        if [ -d "$OLD_DIR" ]; then
          rm -rf "$OLD_DIR"
        fi
        
        echo "✅ Successfully deployed new version!"
        echo "🎉 DEPLOYMENT IS NOW LIVE!"
    
    # Step 11: Verify deployment
    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        CURRENT_DIR="/var/www2/m.aaaauto/htdocs/photo360-beta/Car360GalleryTool/new-360-beta"
        
        # Check if critical files exist
        if [ ! -f "$CURRENT_DIR/index.html" ]; then
          echo "❌ Error: index.html not found in current directory"
          exit 1
        fi
        
        if [ ! -f "$CURRENT_DIR/deployment.json" ]; then
          echo "❌ Error: deployment.json not found"
          exit 1
        fi
        
        # Show deployment info
        echo "📋 Deployment info:"
        cat "$CURRENT_DIR/deployment.json"
        
        echo ""
        echo "✅ Deployment verified successfully"
    
    # Step 12: Cleanup old backups (keep last 5)
    - name: Cleanup old releases
      run: |
        echo "🧹 Cleaning up old backups..."
        
        cd /var/www2/m.aaaauto/htdocs/photo360-beta/releases/
        
        # Count backup directories
        BACKUP_COUNT=$(ls -1d *_backup 2>/dev/null | wc -l)
        echo "Total backups: $BACKUP_COUNT"
        
        if [ $BACKUP_COUNT -gt 10 ]; then
          # Remove old backups (keep last 10)
          ls -td *_backup | tail -n +6 | xargs -r rm -rf
          echo "✅ Old backups removed"
        else
          echo "✅ No cleanup needed (keeping all $BACKUP_COUNT backups)"
        fi
    
    # Step 13: Final summary
    - name: Deployment summary
      run: |
        echo "========================================="
        echo "🎉 DEPLOYMENT COMPLETE AND LIVE!"
        echo "========================================="
        echo "📦 Release: ${{ steps.timestamp.outputs.timestamp }}"
        echo "🔗 Commit: ${{ steps.timestamp.outputs.commit_sha }}"
        echo "👤 Deployed by: ${{ github.actor }}"
        echo "🌿 Branch: ${{ steps.timestamp.outputs.branch }}"
        echo "⏰ Time: $(date)"
        echo ""
        echo "📁 Live at: /var/www2/m.aaaauto/htdocs/photo360-beta/Car360GalleryTool/new-360-beta/"
        echo "========================================="
        
        # Log to deployment history
        echo "[$(date)] ${{ steps.timestamp.outputs.timestamp }} - ${{ github.actor }} - ${{ steps.timestamp.outputs.commit_sha }}" >> /var/www2/m.aaaauto/htdocs/photo360-beta/deployment.log
